package com.track.currencybot.currency_track_bot.bot;

import com.track.currencybot.currency_track_bot.exception.ServiceException;
import com.track.currencybot.currency_track_bot.service.CurrencyTrackBotService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.text.SimpleDateFormat;
import java.util.Calendar;

@Component
public class CurrencyTrackBot extends TelegramLongPollingBot {

    public static final Logger LOG = LoggerFactory.getLogger(CurrencyTrackBot.class);

    public static final String START = "/start";
    public static final String BTC = "/btc";
    public static final String ETH = "/eth";
    public static final String HELP = "/help";

    @Autowired
    private CurrencyTrackBotService currencyTrackBotService;

    public CurrencyTrackBot(@Value("${bot.token}") String botToken) {
        super(botToken);
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (!update.hasMessage() || !update.getMessage().hasText()) {
            return;
        }

        String message = update.getMessage().getText();
        Long chatId = update.getMessage().getChatId();
        switch (message) {
            case START -> startCommand(chatId);
            case BTC -> btcCommand(chatId);
            case ETH -> ethCommand(chatId);
            case HELP -> helpCommand(chatId);
            default -> unknownCommand(chatId);
        }
    }

    @Override
    public String getBotUsername() {
        return "currency_track_bot";
    }

    private void startCommand(Long chatId) {
        String message = """
        ‚ú® –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –∫—Ä–∏–ø—Ç–æ-–∏—Å–∫–∞—Ç–µ–ª—å! üöÄ

        –Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∫—É—Ä—Å–∞–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏! üìäüí∞
        
        –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:  
        üîπ /btc ‚Äî –£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å Bitcoin  
        üîπ /eth ‚Äî –£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å Ethereum  
        üîπ /help ‚Äî –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

        ‚ö° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É, –∏ —è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!  

        üîî –°–æ–≤–µ—Ç: –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä—ã–Ω–∫–∞! 
        """;
        sendMessage(chatId, message);
    }

    private void btcCommand(Long chatId) {
        try {
            String btc = currencyTrackBotService.getBTCCurrencyTrack();
            String date = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(Calendar.getInstance().getTime());

            String message = """
            üü† Bitcoin (BTC)  
            üìÖ –î–∞—Ç–∞: %s  
            üí∞ –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: %s USD  
            
            üîç –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!
        """.formatted(date, btc);

            sendMessage(chatId, message);
        } catch (ServiceException e) {
            LOG.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ BTC", e);
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ Bitcoin (BTC). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    private void ethCommand(Long chatId) {
        try {
            String eth = currencyTrackBotService.getETHCurrencyTrack();
            String date = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(Calendar.getInstance().getTime());

            String message = """
            üî∑ Ethereum (ETH)  
            üìÖ –î–∞—Ç–∞: %s  
            üí∞ –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: %s USD  
            
            üîç –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!
        """.formatted(date, eth);

            sendMessage(chatId, message);
        } catch (ServiceException e) {
            LOG.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ ETH", e);
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ Ethereum (ETH). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    private void helpCommand(Long chatId) {
        String message = """
        ‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º ‚ÑπÔ∏è  

        ‚ú® –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:  
        üîπ /start ‚Äî –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º 
        üîπ /btc ‚Äî –£–∑–Ω–∞—Ç—å –∫—É—Ä—Å Bitcoin (BTC)
        üîπ /eth ‚Äî –£–∑–Ω–∞—Ç—å –∫—É—Ä—Å Ethereum (ETH)  
        üîπ /help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É 

        üîî –°–æ–≤–µ—Ç: –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã, —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç!  
        """;

        sendMessage(chatId, message);
    }

    private void unknownCommand(Long chatId) {
        String message = """
        ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ‚ùå  

        –Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã. üòî  
        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥. ‚ÑπÔ∏è  
        """;

        sendMessage(chatId, message);
    }

    private void sendMessage(Long chatId, String message) {
        var chatIdStr = String.valueOf(chatId);
        var sendMessage = new SendMessage(chatIdStr, message);
        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            LOG.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", e);
        }
    }

}
